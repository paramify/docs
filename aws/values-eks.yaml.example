# Paramify Helm configuration example for AWS EKS
#
# Example install:
#   helm registry login registry.paramify.com --username paramify@mycompany.com --password <license_id>
#   helm install paramify oci://registry.paramify.com/paramify/paramify --namespace paramify --values ~/values-eks.yaml
#   helm upgrade paramify oci://registry.paramify.com/paramify/paramify --namespace paramify --values ~/values-eks.yaml

# Paramify main application endpoint (recommend DNS entry and SSL cert)
services:
  paramify:
    type: LoadBalancer  # optionally ClusterIP or NodePort (NOTE: For ALB see "ingresses" below)
    annotations:
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:<region>:<account_id>:certificate/<guid>"  # replace with your SSL cert
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: http
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
      service.beta.kubernetes.io/load-balancer-source-ranges: "192.168.0.1/32"  # replace with your IP addresses, or remove for public access
    ports:
      http:
        nodePort: null  # set preferred port (30000-32767) or null to autoassign
        port: 443

# To optionally use an ALB, set above service type to ClusterIP and comment out all service annotations, then uncomment the following and customize
# ingresses:
#   paramify:
#     enabled: true
#     annotations:
#       kubernetes.io/ingress.class: "alb"
#       alb.ingress.kubernetes.io/load-balancer-name: "paramify-alb"
#       alb.ingress.kubernetes.io/scheme: "internet-facing"  # or "internal"
#       alb.ingress.kubernetes.io/target-type: "ip"
#       alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
#       alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:<region>:<account_id>:certificate/<guid>"  # replace with your SSL cert
#       alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS13-1-2-FIPS-2023-04  # specify desired ssl policy
#       alb.ingress.kubernetes.io/healthcheck-path: /health-check
#       alb.ingress.kubernetes.io/healthcheck-port: traffic-port
#       alb.ingress.kubernetes.io/healthcheck-protocol: HTTPS
#       alb.ingress.kubernetes.io/healthcheck-interval-seconds: "10"
#       alb.ingress.kubernetes.io/backend-protocol: HTTPS
#       alb.ingress.kubernetes.io/load-balancer-attributes: idle_timeout.timeout_seconds=180
#     hosts:
#     - host: 'paramify.mycompany.com'
#       paths:
#       - path: /
#         pathType: Prefix
#         service:
#           name: paramify
#           port: 3000
#     # tls:
#     # - hosts:
#     #   - 'paramify.mycompany.com'
#     #   secretName: paramify-app-tls

apps:
  admission:
    containers:
      admission:
        env:
        - name: WHITELISTED_REGISTRIES
          value: "registry.paramify.com,proxy.paramify.com,ghcr.io,cgr.dev,kotsadm,minio,rqlite,openebs,602401143452.dkr.ecr.us-west-2.amazonaws.com"  # update the AWS domain for your region from https://docs.aws.amazon.com/eks/latest/userguide/add-ons-images.html
#         # For Helm airgap replace the images with your internal registry (and add your registry in the registries list above)
#         image:
#           repository: proxy.paramify.com/proxy/paramify/041462616641.dkr.ecr.us-west-2.amazonaws.com/admission
#           tag: "abc123@sha256:abc123...abc123"
#   paramify:
#     containers:
#       paramify:
#         image:
#           repository: proxy.paramify.com/proxy/paramify/041462616641.dkr.ecr.us-west-2.amazonaws.com/paramify
#           tag: "abc123@sha256:abc123...abc123"
#     # Optionally reference secret with custom SSL cert for container (data with tls.key/tls.cert)
#     volumes:
#     - name: paramify-secrets
#       secret:
#         secretName: paramify-custom-tls
#   document-robot:
#     containers:
#       document-robot:
#         image:
#           repository: proxy.paramify.com/proxy/paramify/041462616641.dkr.ecr.us-west-2.amazonaws.com/document-robot
#           tag: "abc123@sha256:abc123...abc123"
# # Optionally set the SDK image when using custom registry (for airgap)
# replicated:
#   isAirgap: true
#   images:  # deprecated for "image" below with release 1.44.0
#     replicated-sdk: replicated/replicated-sdk:abc123
#   image:
#     repository: "replicated/replicated-sdk"
#     tag: "abc123"

# Custom environment configuration (replace <val> entries)
configmaps:
  paramify:
    data:
      AUTH_SMTP_ENABLED: "true"
      SMTP_ENABLED: "true"
      SMTP_FROM: "Paramify <noreply@mycompany.com>"
      SMTP_HOST: "<smtp_host>"
      SMTP_PORT: "465"
      SMTP_USER: "mail@mycompany.com"
      ADMIN_EMAIL: "user@mycompany.com"
      APP_BASE_URL: "https://paramify.mycompany.com"  # if DNS is set on LB then match here (e.g., "https://paramify.mycompany.com")
      AUTH_GOOGLE_ENABLED: "false"
      AUTH_GOOGLE_CLIENT_ID: "<guid>.apps.googleusercontent.com"
      AUTH_MICROSOFT_ENABLED: "false"
      AUTH_MICROSOFT_CLIENT_ID: "<guid>"
      AUTH_OKTA_ENABLED: "false"
      AUTH_OKTA_DOMAIN: "<id>.okta.com"
      AUTH_OKTA_CLIENT_ID: "<guid>"
      AWS_STORAGE_BUCKET_NAME: "paramify-mycompany-s3"
      AWS_REGION: "<region>"
  document-robot:
    data:
      STORAGE_PROVIDER: "AWSS3"
      AWS_S3_BUCKET: "paramify-mycompany-s3"
      AWS_REGION: "<region>"

secrets:
  paramify:
    data:
      AUTH_GOOGLE_CLIENT_SECRET: "<secret>"
      AUTH_MICROSOFT_CLIENT_SECRET: "<secret>"
      AUTH_OKTA_CLIENT_SECRET: "<secret>"
      SMTP_PASSWORD: "<secret>"

serviceAccounts:
  paramify:
    annotations:
      eks.amazonaws.com/role-arn: "arn:aws:iam::<account_id>:role/paramify-mycompany-eks-sa-role"  # replace with your IAM role

paramify:
  admission:
    enabled: false  # optionally enable for admission webhook preventing unknown image sources
  #postgresPassword: "<password>"  # password for container db (not recommended)
  externalPostgresql:
    enabled: true
    username: "paramify"
    database: "paramify"
    password: "<password>"
    host: "paramify-mycompany-db.<guid>.<region>.rds.amazonaws.com"  # replace with your db url
    port: "5432"
  pgbackup:
    enabled: false  # automated daily backup for container db (recommended if using container db)

